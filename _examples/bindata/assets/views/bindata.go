// Code generated by go-bindata.
// sources:
// views/index.html
// views/layouts/footer.html
// views/layouts/master.html
// views/page.html
// DO NOT EDIT!

package viewsdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xbd\x6e\xeb\x30\x0c\x85\x77\x3f\x05\x2f\x77\x45\x08\x72\xbb\xd9\xde\x8a\x76\xec\xd0\x17\xa0\x2d\x46\x12\xa0\x3f\x48\x4c\xd2\xc0\xf0\xbb\x17\x4d\xab\x76\x13\xbe\x23\xf2\x3b\xe0\xb6\x19\x3e\xfb\xc4\x80\x8e\xc9\xe0\xbe\x0f\xdb\xc6\xc9\xec\xfb\x30\x0c\x7f\xd9\x9a\x93\x70\x92\xaf\x78\x34\xfe\x0a\x6b\xa0\xd6\x26\x6c\x8e\x4c\xbe\xa9\x60\xa1\xa8\x13\xc4\x45\x3d\xc1\x62\xd5\xcd\x79\x61\xa8\xf9\x92\x0c\x1b\x9c\x07\x00\x80\xd1\x1d\xfb\x90\xf1\xad\x04\xba\xab\xff\x38\xbf\x72\x08\x19\x84\x63\x09\x24\xfc\x6f\xd4\xee\xf8\xf3\xdd\x47\x0b\xad\xae\x13\xea\x26\x24\x7e\xd5\x3e\x5a\x6d\x73\x71\x5c\x0f\x25\x59\x04\x0a\x32\xe1\xcb\x03\x74\x45\xe9\x86\x72\x57\x27\x9c\xdf\x9d\x6f\xe0\x1b\xf0\x07\xc5\x12\x18\xce\xb9\xfe\xaa\xa0\x5d\x4a\xc9\x55\xc0\x66\xb5\xf8\x64\x48\xe8\x30\xea\xd2\xbb\xd6\xbe\x29\x3e\x6a\x7e\x53\xea\x70\x91\x04\x8b\x24\x55\xaa\x8f\x54\xef\x8f\x77\xb0\x08\xae\xf2\x79\x42\x5d\xc8\x32\x42\xcd\x81\x27\x5c\x2e\x22\x39\xe1\xfc\x9c\x84\x2b\xbc\x91\xe5\x51\xd3\x3c\x8c\xda\xf8\xeb\xdc\x2f\xfd\x19\x00\x00\xff\xff\x71\xdc\x3e\x74\x83\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 387, mode: os.FileMode(493), modTime: time.Unix(1554495218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xce\x2f\xa8\x2c\xca\x4c\xcf\x28\x51\x50\x4b\xce\x2f\xa8\x34\x32\x30\xb4\x50\xb0\x49\x54\xc8\x28\x4a\x4d\xb3\x55\xca\x28\x29\x29\x28\xb6\xd2\xd7\x4f\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\x4f\xcb\xcf\xcf\xc9\xcc\x53\x52\x28\x49\x2c\x4a\x4f\x2d\xb1\x55\x8a\x4f\xca\x49\xcc\xcb\x56\xb2\x73\x03\x8b\xdb\xe8\x27\xda\x01\x02\x00\x00\xff\xff\x8b\x08\x59\x06\x52\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 82, mode: os.FileMode(493), modTime: time.Unix(1556606317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsMasterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x51\x4b\x6e\x1c\x21\x10\xdd\x73\x8a\x32\x6b\xd3\x28\x8b\x48\x59\x00\x8b\xe4\x06\xf1\x09\x30\xd4\x84\x92\x69\xe8\x50\x35\x63\xb5\x46\x7d\xf7\x68\x98\x71\xec\x15\xf0\x8a\xf7\xe1\xe1\x9e\x8c\x01\x7b\x21\x7c\x67\x1b\xf3\x4a\xcd\xae\x91\x05\xc7\x52\x64\xad\x60\x4c\x50\xee\x29\xf7\x24\xfb\x86\x70\x83\x82\x52\xee\xbe\xba\x82\x31\x07\x05\x00\x30\x45\x7e\xe3\xdf\x33\x0d\xcc\xb0\xa2\x44\x90\xf8\x87\x27\x7d\xce\x27\x94\x4a\x1c\x8c\xe2\xf5\x59\x4e\xe6\x87\xfe\x3a\x6a\x71\x45\xaf\x6f\x29\xb6\x3e\x44\x43\xea\x4d\xb0\x89\xd7\xef\x94\xa5\xf8\x8c\x17\x4a\x68\xe6\xe1\x19\xa8\x91\x50\xac\x86\x53\xac\xe8\xbf\x3d\x03\x97\x41\xed\xcd\x48\x37\x27\x12\xdf\xba\x0e\xea\x33\xd6\xcf\xde\x85\x65\xc4\x0d\x7e\xbd\xbc\x7c\x26\xaa\xd4\xde\x60\x60\xf5\x9a\x65\xaf\xc8\x05\x51\x34\x94\x81\x27\xaf\x2d\x4b\x14\x4a\x36\x31\xdb\xd7\x0f\xfa\xb2\x52\x5b\x12\xf3\x7f\x71\x21\xa9\x18\xae\xd7\x65\x6e\x8e\xc3\xd9\x3b\xa2\xae\x57\xc1\x75\xab\x51\x10\xf4\xad\x23\x0d\xcb\x71\x28\x67\xef\x7d\x29\xf7\xda\xf3\x1e\x94\xcb\x74\x81\x54\x23\xb3\xd7\xb7\xe7\x46\x6a\x38\x60\xdb\xcd\xf7\x0f\x87\xaf\x3a\x8f\x42\xee\x52\xd3\xbe\x8c\xf0\xb8\x45\x2d\xd5\x73\x46\xd0\x35\xee\xfd\x2c\x6c\x4f\xbd\x0b\x0e\x7d\x1c\x4a\x39\x9b\xe9\x12\x94\xb3\x0f\x53\x3b\xff\xee\x5f\x00\x00\x00\xff\xff\x91\xcc\xf7\x18\xf5\x01\x00\x00")

func layoutsMasterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsMasterHtml,
		"layouts/master.html",
	)
}

func layoutsMasterHtml() (*asset, error) {
	bytes, err := layoutsMasterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/master.html", size: 501, mode: os.FileMode(493), modTime: time.Unix(1553875351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x31\x6f\xdb\x3c\x10\xdd\xfd\x2b\xce\x9c\x12\xc0\x34\xf1\x0d\x1f\x50\x04\x92\x86\x76\x69\xb7\x22\x29\xba\x04\x19\xce\xe4\xc9\xba\x86\x22\x55\xf2\x24\xc7\x30\xfc\xdf\x0b\x49\x71\x9a\x38\x41\xd3\x4e\x26\x1f\x9f\x1f\xdf\xbd\xe3\xa9\x58\x6a\x0d\x66\x60\xda\x65\xd3\xe1\x96\xd6\x8d\xb4\x1e\xb4\xae\x16\xc5\xd2\x45\x2b\xfb\x8e\x60\x84\xaa\xc5\xa2\x98\x7f\x01\x00\x8a\x86\xd0\xcd\xcb\x69\x3b\x8a\x5c\xd3\xcf\x9e\x13\x39\x68\x49\x10\x04\xb7\x79\x92\x79\xe2\x4c\xb0\x6d\x30\x65\x92\x52\xf5\x52\xeb\x0f\xea\xfc\x38\x60\x4b\xa5\x1a\xdd\x74\x31\x89\x02\x1b\x83\x50\x90\x52\xed\xd8\x49\x53\x3a\x1a\xd8\x92\x9e\x36\x2b\xe0\xc0\xc2\xe8\x75\xb6\xe8\xa9\xfc\x6f\x05\xb9\x49\x1c\xee\xb5\x44\x5d\xb3\x94\x21\xaa\x6a\xf1\xd2\xe2\xc7\x18\x25\x4b\xc2\x0e\x3e\xdd\xdc\xbc\x74\xe7\x39\xdc\x43\x22\x5f\xaa\x2c\x7b\x4f\xb9\x21\x12\x05\x4d\xa2\xba\x54\x26\x0b\x0a\x5b\x63\x73\x36\x9b\x93\xc4\xba\xe5\xb0\xb6\x39\xbf\xb8\x44\x58\x3c\x55\x87\xc3\x7a\x5a\x1c\x8f\x85\x99\x91\x39\x34\x33\xa7\x36\x6f\x36\xd1\xed\x9f\xdd\xef\x78\x00\xeb\x31\xe7\x52\x8d\x45\x23\x07\x4a\xd0\xed\xf5\xff\xcf\x32\x9a\x88\x01\x07\xc0\xc4\xa8\x3d\x6e\x46\xbb\x9b\x44\xe8\x6c\xea\xdb\xcd\x19\x73\x62\x47\x7f\x52\xfd\x23\xef\x31\x82\xd7\x5c\xcd\x42\xad\xaa\x0a\x3c\x45\xa1\xaa\xcf\xb1\xa5\xc2\x60\x55\x18\xcf\xff\xaa\x04\x68\x85\x07\x52\x73\x05\xb6\x4f\x69\xea\xee\xf8\xf0\x54\xf5\x15\xb7\xf4\xb6\x68\x61\xa2\x3f\x8b\xc1\x04\x1c\xce\xa0\x26\x9d\x01\xdd\xc9\x85\xd0\x83\xe8\x1f\x7d\x16\xae\xf7\x6f\x54\xff\xad\xe1\x0c\xa3\x07\x08\x51\xa0\xcf\x04\x2d\x66\xa1\xb4\x82\x6b\x0a\x8e\x12\xd8\xe8\xe8\xea\xb5\xab\x2e\x51\x55\x8c\x67\xd5\xfc\xef\xab\x12\x68\xfd\x25\x64\xc1\x60\xe9\x42\x3d\x8d\x93\x5a\x41\x8b\xf7\x74\xd1\x62\x77\x9b\x25\x71\xd8\xde\x71\x10\x4a\x35\x5a\x3a\x1c\x2f\x2f\x0b\x33\x89\x14\x66\x14\x7c\xf7\x9a\xf5\x77\x4c\xf9\x56\x4d\x0f\x4b\xdd\x41\x09\x6a\x0c\x0e\x6a\xf6\x04\x13\xb8\x5c\xaa\xbf\x56\x9c\x04\xe7\x2a\x2f\x76\xef\x19\xd9\xa4\xd7\xe0\xb3\x2a\x41\x03\x3a\x07\xf4\x20\x14\x32\xc7\x00\xa0\x1e\x0f\x76\xec\x3d\xa4\x39\xcb\x1d\x4b\x13\x7b\x79\x8c\x78\x7d\xd6\xd5\xee\x9d\x9e\x1e\x0e\x1c\xac\xef\x1d\x81\xf2\xb8\x8f\xbd\x64\x53\xc7\x28\x94\xd4\xf1\xf8\x7b\x98\x8c\xe3\xe1\x34\x73\xf3\x9c\x15\x66\xfa\x78\xfd\x0a\x00\x00\xff\xff\x23\x6f\x1e\x44\xee\x04\x00\x00")

func pageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pageHtml,
		"page.html",
	)
}

func pageHtml() (*asset, error) {
	bytes, err := pageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page.html", size: 1262, mode: os.FileMode(420), modTime: time.Unix(1554476860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/master.html": layoutsMasterHtml,
	"page.html": pageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"master.html": &bintree{layoutsMasterHtml, map[string]*bintree{}},
	}},
	"page.html": &bintree{pageHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

